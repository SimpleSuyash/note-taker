// Import Express.js, pody-parser
const express = require("express");
// const noteData = require("../db/db.json");
const uuid = require("../helpers/uuid");
//importing built-in node modules
const fs = require("node:fs");

//Colored symbols for various log levels
//includes info, success, warning and error
const logSymbols = require("log-symbols");


const router = express.Router();

//GET request for notes
router.get("/",(req,res)=> {
     //getting currently existing notes
     fs.readFile("./db/db.json", "utf8", (err, data)=>{
        if(err){
            console.error(`${logSymbols.error}`, `\x1b[3;31m${err}\x1b[0m`);
        }else{
            //converting string data from db.json to JSON obj
            const noteData = JSON.parse(data);
          
            console.log(`${logSymbols.info}`, noteData);
            // console.log(response);
            res.status(201).json(noteData);
        }
    });
});

//POST request to add a note
router.post("/",(req,res)=>{
    // Destructuring assignment for the items in req.body
    const {title, text} = req.body;
    // If all the required properties are present
    if(title && text ){
        // if(title && text && title.trim()!=="" && text.trim()!==""){
        //note object that will be saved to db.json file
        const newNote = {
            //id is generated by helper uuid.js
            id: uuid,
            title,
            text
        };
        //getting currently existing notes
        fs.readFile("./db/db.json", "utf8", (err, data)=>{
            if(err){
                console.error(`${logSymbols.error}`, `\x1b[3;31m${err}\x1b[0m`);
            }else{
                //converting string data from db.json to JSON obj
                const parsedNotes = JSON.parse(data);
                //adding a new note to the list of notes
                parsedNotes.push(newNote);
                //converting JSON obj back to string for saving in db.json
                const stringifiedNotes = JSON.stringify(parsedNotes, null, 5);
                //writing the updated notes list to the db.json file
                fs.writeFile("./db/db.json", stringifiedNotes, writeErr=>{
                    writeErr
                        ? console.error(`${logSymbols.error}`, `\x1b[3;31m${writeErr}\x1b[0m`)
                        : console.info(`${logSymbols.success}`,`\x1b[3;92mThe new note with id ${newNote.id} has been added to the notes!\x1b[0m`)
                });
            }
        });

        //creating response obj
        const response = {
            status: "Success",
            body: newNote
        };
        console.log(`${logSymbols.info}`, response);
        // console.log(response);
        res.status(201).json(response);
    // when any of the madatory fields such as title and text are empty or undefined
    }else{
        res.status(500).json('Error in posting the notes');
    }
});

//put request to update note
router.put("/",(req,res)=>{
    // Destructuring assignment for the items in req.body
    const {id, title, text} = req.body;
    // If all the required properties are present
    if(id && title && text ){
        // if(title && text && title.trim()!=="" && text.trim()!==""){
        //note object that will be saved to db.json file
        const newNote = {
            //id will be number of current items in the array + 1
            id,
            title,
            text
        };
        //getting currently existing notes
        fs.readFile("./db/db.json", "utf8", (err, data)=>{
            if(err){
                console.error(err);
            }else{
                //converting string data from db.json to JSON obj
                const parsedNotes = JSON.parse(data);
                //when new object's id matches one of the existing item's id
                // change the content of the existing item with the new object's content
                parsedNotes.forEach(note =>{
                    if(note.id === id){
                        note.text= text;
                        note.title = title;
                        return;
                    }
                });
                //converting JSON obj back to string for saving in db.json
                const stringifiedNotes = JSON.stringify(parsedNotes, null , 5);
                //writing the updated notes list to the db.json file
                fs.writeFile("./db/db.json", stringifiedNotes, writeErr=>{
                    writeErr
                        ? console.error(`${logSymbols.error}`, `\x1b[3;31m${writeErr}\x1b[0m`)
                        : console.info(`${logSymbols.success}`,`\x1b[3;92mThe new note with id ${newNote.id} has been updated in the notes!\x1b[0m`)
                });
            }
        });

        //creating response obj
        const response = {
            status: "Success",
            body: newNote
        };
        console.log(`${logSymbols.info}`, response)
        res.status(201).json(response);
    // when any of the madatory fields such as title and text are empty or undefined
    }else{
        res.status(500).json('Error in updating the notes');
    }
});
router.delete("/:id",(req,res)=>{
    const id = req.params.id;
    if(id){
        //getting currently existing notes
        fs.readFile("./db/db.json", "utf8", (err, data)=>{
            if(err){
                console.error(err);
            }else{
                //converting string data from db.json to JSON obj
                const parsedNotes = JSON.parse(data);
                //when the req parameter id and one of the existing notes' id match
                //filter out the matching item
                const filteredNotes=parsedNotes.filter(note =>{
                    // console.log(`note.id ${note.id}, id ${id}`);
                    if(note.id === Number(id)){
                        return false;
                    }else{
                        return true;
                    }
                });
                //converting JSON obj back to string for saving in db.json
                const stringifiedNotes = JSON.stringify(filteredNotes);
                //writing the updated notes list to the db.json file
                fs.writeFile("./db/db.json", stringifiedNotes, writeErr=>{
                    writeErr
                        ? console.error(`${logSymbols.error}`, `\x1b[3;31m${writeErr}\x1b[0m`)
                        : console.info(`${logSymbols.success}`,`\x1b[3;92mThe new note with id ${id} has been deleted from the notes!\x1b[0m`)
                });
            }
        });
        //creating response obj
        const response = {
            status: "Success",
            body: `The new note with id ${id} has been deleted from the notes!`
        };
        console.log(`${logSymbols.info}`, response)
        res.status(201).json(response);
    // when id is undefined
    }else{
        res.status(500).json('Error in updating the notes');
    }
});


module.exports = router;